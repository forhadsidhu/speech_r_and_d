# -*- coding: utf-8 -*-
"""music_generation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jIs6hpoqvvCz8PY4jyXa13AstUiZ0Lsu
"""

!wget -O bach_cello_suite_1_prelude.mid 'https://www.mfiles.co.uk/downloads/bach-cello-suite-no1-prelude.mid'

!pip install pretty_midi

!pip install music21

"""**Getting Notes and Duration string from dataset**"""

from music21 import converter,instrument,note,chord

def parse_midi_music21(midi_file):
  # Load the MIDI file
  midi_data = converter.parse(midi_file)

  notes_data = []
  offset = 0

  for part in midi_data.parts:
    for element in part.recurse():
      if isinstance(element,note.Note):
        notes_data.append({
            "pitch": element.pitch.midi,
            "start": element.offset,
            "duration": element.quarterLength
        })
      elif isinstance(element,chord.Chord):
        for pitch in element.pitches:
          notes_data.append({
              "pitch":pitch.midi,
              "start":element.offset,
              "duration":element.quarterLength
          })

  return notes_data

midi_file = "bach_cello_suite_1_prelude.mid"  # Change this to your file
notes = parse_midi_music21(midi_file)

# Print first 10 notes
for note in notes[:10]:
  print(note)

"""**Visulaize the music file**"""

import matplotlib.pyplot as plt
from music21 import converter,note,chord

def plot_piano_roll(midi_file):
  midi_data = converter.parse(midi_file)

  notes = []
  start_times = []

  for part in midi_data.parts:
        for element in part.recurse():
            if isinstance(element, note.Note):
                notes.append(element.pitch.midi)
                start_times.append(element.offset)
            elif isinstance(element, chord.Chord):
                for pitch in element.pitches:
                    notes.append(pitch.midi)
                    start_times.append(element.offset)
  plt.figure(figsize=(12, 6))
  plt.scatter(start_times, notes, c='blue', marker='o')
  plt.xlabel("Time (beats)")
  plt.ylabel("MIDI Note Number")
  plt.title("Piano Roll Visualization")
  plt.grid()
  plt.show()


midi_file = "bach_cello_suite_1_prelude.mid"
plot_piano_roll(midi_file)

"""**Tokenization**"""

from music21 import converter, note, chord, stream

# Load MIDI file
midi_file = 'bach_cello_suite_1_prelude.mid'
midi_data = converter.parse(midi_file)

# Initialize empty list for tokens
tokens = []

# Iterate over the music stream
for element in midi_data.flat.notes:
    if isinstance(element, note.Note):  # If it's a single note
        token = f"Note_{element.pitch.midi}_{element.quarterLength}"
        tokens.append(token)
    elif isinstance(element, chord.Chord):  # If it's a chord
        token = f"Chord_{'-'.join(str(pitch.midi) for pitch in element.pitches)}_{element.quarterLength}"
        tokens.append(token)

# Show tokens
print(tokens)

import tensorflow as tf
from tensorflow.keras.layers import TextVectorization

#Create a TextVectorization Layer
vectorizer = TextVectorization(standardize=None)

#Fit the TextVectorizer on the tokens
vectorizer.adapt(tokens)

vectorizer_tokens = vectorizer(tokens)

print(f"Tokenized indices:{vectorizer_tokens}")

